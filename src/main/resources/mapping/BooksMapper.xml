<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lib.management.mapper.BooksMapper" >
  <resultMap id="BaseResultMap" type="com.lib.management.model.Books" >
    <id column="book_id" property="bookId" jdbcType="INTEGER" />
    <result column="book_info_id" property="bookInfoId" jdbcType="INTEGER" />
    <result column="book_create_by" property="bookCreateBy" jdbcType="INTEGER" />
    <result column="book_location_room" property="bookLocationRoom" jdbcType="INTEGER" />
    <result column="book_location_sheet" property="bookLocationSheet" jdbcType="INTEGER" />
    <result column="book_location_sheet_level" property="bookLocationSheetLevel" jdbcType="INTEGER" />
    <result column="location_update_time" property="locationUpdateTime" jdbcType="TIMESTAMP" />
    <result column="book_borrow_status" property="bookBorrowStatus" jdbcType="INTEGER" />
    <result column="book_pre_order_pass_time" property="bookPreOrderPassTime" jdbcType="TIMESTAMP" />
    <result column="book_borrow_update_time" property="bookBorrowUpdateTime" jdbcType="TIMESTAMP" />
    <result column="book_borrow_by" property="bookBorrowBy" jdbcType="INTEGER" />
    <result column="book_borrowed_time" property="bookBorrowedTime" jdbcType="TIMESTAMP" />
    <result column="book_should_return_before" property="bookShouldReturnBefore" jdbcType="TIMESTAMP" />
    <result column="book_active_status" property="bookActiveStatus" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    book_id, book_info_id, book_create_by, book_location_room, book_location_sheet, book_location_sheet_level, 
    location_update_time, book_borrow_status, book_pre_order_pass_time, book_borrow_update_time, 
    book_borrow_by, book_borrowed_time, book_should_return_before, book_active_status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from books
    where book_id = #{bookId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from books
    where book_id = #{bookId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lib.management.model.Books" >
    insert into books (book_id, book_info_id, book_create_by, 
      book_location_room, book_location_sheet, book_location_sheet_level, 
      location_update_time, book_borrow_status, 
      book_pre_order_pass_time, book_borrow_update_time, 
      book_borrow_by, book_borrowed_time, book_should_return_before, 
      book_active_status)
    values (#{bookId,jdbcType=INTEGER}, #{bookInfoId,jdbcType=INTEGER}, #{bookCreateBy,jdbcType=INTEGER}, 
      #{bookLocationRoom,jdbcType=INTEGER}, #{bookLocationSheet,jdbcType=INTEGER}, #{bookLocationSheetLevel,jdbcType=INTEGER}, 
      #{locationUpdateTime,jdbcType=TIMESTAMP}, #{bookBorrowStatus,jdbcType=INTEGER}, 
      #{bookPreOrderPassTime,jdbcType=TIMESTAMP}, #{bookBorrowUpdateTime,jdbcType=TIMESTAMP}, 
      #{bookBorrowBy,jdbcType=INTEGER}, #{bookBorrowedTime,jdbcType=TIMESTAMP}, #{bookShouldReturnBefore,jdbcType=TIMESTAMP}, 
      #{bookActiveStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lib.management.model.Books" >
    insert into books
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="bookId != null" >
        book_id,
      </if>
      <if test="bookInfoId != null" >
        book_info_id,
      </if>
      <if test="bookCreateBy != null" >
        book_create_by,
      </if>
      <if test="bookLocationRoom != null" >
        book_location_room,
      </if>
      <if test="bookLocationSheet != null" >
        book_location_sheet,
      </if>
      <if test="bookLocationSheetLevel != null" >
        book_location_sheet_level,
      </if>
      <if test="locationUpdateTime != null" >
        location_update_time,
      </if>
      <if test="bookBorrowStatus != null" >
        book_borrow_status,
      </if>
      <if test="bookPreOrderPassTime != null" >
        book_pre_order_pass_time,
      </if>
      <if test="bookBorrowUpdateTime != null" >
        book_borrow_update_time,
      </if>
      <if test="bookBorrowBy != null" >
        book_borrow_by,
      </if>
      <if test="bookBorrowedTime != null" >
        book_borrowed_time,
      </if>
      <if test="bookShouldReturnBefore != null" >
        book_should_return_before,
      </if>
      <if test="bookActiveStatus != null" >
        book_active_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="bookId != null" >
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="bookInfoId != null" >
        #{bookInfoId,jdbcType=INTEGER},
      </if>
      <if test="bookCreateBy != null" >
        #{bookCreateBy,jdbcType=INTEGER},
      </if>
      <if test="bookLocationRoom != null" >
        #{bookLocationRoom,jdbcType=INTEGER},
      </if>
      <if test="bookLocationSheet != null" >
        #{bookLocationSheet,jdbcType=INTEGER},
      </if>
      <if test="bookLocationSheetLevel != null" >
        #{bookLocationSheetLevel,jdbcType=INTEGER},
      </if>
      <if test="locationUpdateTime != null" >
        #{locationUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookBorrowStatus != null" >
        #{bookBorrowStatus,jdbcType=INTEGER},
      </if>
      <if test="bookPreOrderPassTime != null" >
        #{bookPreOrderPassTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookBorrowUpdateTime != null" >
        #{bookBorrowUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookBorrowBy != null" >
        #{bookBorrowBy,jdbcType=INTEGER},
      </if>
      <if test="bookBorrowedTime != null" >
        #{bookBorrowedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookShouldReturnBefore != null" >
        #{bookShouldReturnBefore,jdbcType=TIMESTAMP},
      </if>
      <if test="bookActiveStatus != null" >
        #{bookActiveStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lib.management.model.Books" >
    update books
    <set >
      <if test="bookInfoId != null" >
        book_info_id = #{bookInfoId,jdbcType=INTEGER},
      </if>
      <if test="bookCreateBy != null" >
        book_create_by = #{bookCreateBy,jdbcType=INTEGER},
      </if>
      <if test="bookLocationRoom != null" >
        book_location_room = #{bookLocationRoom,jdbcType=INTEGER},
      </if>
      <if test="bookLocationSheet != null" >
        book_location_sheet = #{bookLocationSheet,jdbcType=INTEGER},
      </if>
      <if test="bookLocationSheetLevel != null" >
        book_location_sheet_level = #{bookLocationSheetLevel,jdbcType=INTEGER},
      </if>
      <if test="locationUpdateTime != null" >
        location_update_time = #{locationUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookBorrowStatus != null" >
        book_borrow_status = #{bookBorrowStatus,jdbcType=INTEGER},
      </if>
      <if test="bookPreOrderPassTime != null" >
        book_pre_order_pass_time = #{bookPreOrderPassTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookBorrowUpdateTime != null" >
        book_borrow_update_time = #{bookBorrowUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookBorrowBy != null" >
        book_borrow_by = #{bookBorrowBy,jdbcType=INTEGER},
      </if>
      <if test="bookBorrowedTime != null" >
        book_borrowed_time = #{bookBorrowedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookShouldReturnBefore != null" >
        book_should_return_before = #{bookShouldReturnBefore,jdbcType=TIMESTAMP},
      </if>
      <if test="bookActiveStatus != null" >
        book_active_status = #{bookActiveStatus,jdbcType=INTEGER},
      </if>
    </set>
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lib.management.model.Books" >
    update books
    set book_info_id = #{bookInfoId,jdbcType=INTEGER},
      book_create_by = #{bookCreateBy,jdbcType=INTEGER},
      book_location_room = #{bookLocationRoom,jdbcType=INTEGER},
      book_location_sheet = #{bookLocationSheet,jdbcType=INTEGER},
      book_location_sheet_level = #{bookLocationSheetLevel,jdbcType=INTEGER},
      location_update_time = #{locationUpdateTime,jdbcType=TIMESTAMP},
      book_borrow_status = #{bookBorrowStatus,jdbcType=INTEGER},
      book_pre_order_pass_time = #{bookPreOrderPassTime,jdbcType=TIMESTAMP},
      book_borrow_update_time = #{bookBorrowUpdateTime,jdbcType=TIMESTAMP},
      book_borrow_by = #{bookBorrowBy,jdbcType=INTEGER},
      book_borrowed_time = #{bookBorrowedTime,jdbcType=TIMESTAMP},
      book_should_return_before = #{bookShouldReturnBefore,jdbcType=TIMESTAMP},
      book_active_status = #{bookActiveStatus,jdbcType=INTEGER}
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
</mapper>